custom_rules:
  auto_generated_leftovers:
    regex: 'func [^\n]*\{\n(\s*super\.[^\n]*\n(\s*\/\/[^\n]*\n)*|(\s*\/\/[^\n]*\n)+)\s*\}'
    message: "Delete auto-generated functions that you don't use"

  numbers_smell:
    regex: '(return |case |\w\(|: |\?\? |\, |== |<=? |>=? |\+= |\-= |\/= |\*= |%= |\w\.\w+ = )\(*\d{2,}'
    message: "Numbers smell; define a constant instead."

  already_true:
    regex: '== true'
    message: "Don't compare to true, just use the bool value."

  already_bool:
    regex: '== false'
    message: "Don't compare to false, just use !value."

  comments_space:
    name: "Space After Comment"
    regex: '(^ *//\w+)'
    message: 'There should be a space after //'
    severity: warning

  empty_line_after_guard:
    name: "Empty Line After Guard"
    regex: '(^ *guard[a-zA-Z0-9=?.\(\),><!]*\{[ a-zA-Z0-9=?.\(\),><!]*\}\n *(?!(?:return|guard))\S+)'
    message: "There should be an empty line after a guard"
    severity: error

  protocol_conformance:
    name: "Protocol Conformance"
    message: "Protocol conformance should be declared in separate extensions in the same file"
    regex: "(class|struct|extension)[[:space:]]+(?i:(?![^d]*delegate:))[^'\"()<>{},!?:]+:([^'\"<>(){},!?:]+,)+[^'\"<>(){},!?:]*\\{"
    match_kinds:
      - keyword
    severity: warning

  computed_property:
    name: "Computed Properties"
    message: "The get clause should be omitted if the computed property is read only"
    regex: 'var[[:space:]]+[^:]+:[^{]*\\{[[:space:]]*get[[:space:]]*\\{[^}]+\\}(?![[:space:]]*set)'
    match_kinds:
      - keyword
    severity: warning